user www-data;  # Runs NGINX worker processes as www-data user for security
worker_processes auto;  # Automatically sets the number of worker processes based on CPU cores
pid /run/nginx.pid;  # Stores the process ID of the NGINX master process
include /etc/nginx/modules-enabled/*.conf;  # Includes additional module configurations

events {
    worker_connections 768;  # Maximum number of simultaneous connections per worker
}

http {
    ## Basic Settings
    sendfile on;  # Enables efficient file serving
    tcp_nopush on;  # Optimizes packet transmission
    types_hash_max_size 2048;  # Increases hash table size for MIME types
    include /etc/nginx/mime.types;  # Loads MIME types
    default_type application/octet-stream;  # Default file type

    ## SSL Settings
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;  # Supported SSL/TLS protocols
    ssl_prefer_server_ciphers on;  # Prefers server's ciphers over client's

    ## Logging Settings
    access_log /var/log/nginx/access.log;  # Logs successful requests
    error_log /var/log/nginx/error.log;  # Logs errors and issues

    ## WebSocket Load Balancer Configuration
    upstream erlang_servers {
        hash $arg_GameID consistent;  # Uses consistent hashing based on GameID to ensure session persistence
        # Defines three backend Erlang web servers for load balancing.
        # If a server fails 5 times within 30 seconds, it is marked as down temporarily.
        server 10.2.1.30:8080 max_fails=5 fail_timeout=30s;
        server 10.2.1.29:8080 max_fails=5 fail_timeout=30s;
        server 10.2.1.28:8080 max_fails=5 fail_timeout=30s;

        keepalive 16;  # Maintains 16 persistent connections for efficiency
    }

    server {
        listen 8080;  # Listens on port 8080 for incoming connections
        server_name enac_oid_balancer;  # Defines the server name

        location /ws {
            proxy_pass http://erlang_servers;  # Forwards requests to the Erlang server group
            proxy_http_version 1.1;  # Uses HTTP/1.1 for WebSockets
            proxy_set_header Upgrade $http_upgrade;  # Allows WebSocket upgrade
            proxy_set_header Connection "Upgrade";  # Maintains WebSocket connection
            proxy_set_header Host $host;  # Passes the original host header
            proxy_set_header X-Real-IP $remote_addr;  # Preserves the real client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forwards client IP details

            # Fault detection and failover mechanism
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504 invalid_header;
            # If an error occurs (timeout, bad response, etc.), NGINX retries another server
            proxy_next_upstream_timeout 1s;  # Maximum wait time before retrying
            proxy_next_upstream_tries 2;  # Maximum retry attempts before returning an error
        }
    }

    ## Virtual Host Configs
    include /etc/nginx/conf.d/*.conf;  # Loads additional configurations
    include /etc/nginx/sites-enabled/*;  # Loads enabled site configurations
}
